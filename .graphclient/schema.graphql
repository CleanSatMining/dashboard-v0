schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  offerPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OfferPrice
  offerPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: OfferPrice_orderBy
    orderDirection: OrderDirection
    where: OfferPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OfferPrice!]!
  purchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Purchase
  purchases(
    skip: Int = 0
    first: Int = 100
    orderBy: Purchase_orderBy
    orderDirection: OrderDirection
    where: Purchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Purchase!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  burnEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BurnEvent
  burnEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: BurnEvent_orderBy
    orderDirection: OrderDirection
    where: BurnEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BurnEvent!]!
  mintEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MintEvent
  mintEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: MintEvent_orderBy
    orderDirection: OrderDirection
    where: MintEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MintEvent!]!
  transferEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferEvent
  transferEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferEvent_orderBy
    orderDirection: OrderDirection
    where: TransferEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransferEvent!]!
  allowance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Allowance
  allowances(
    skip: Int = 0
    first: Int = 100
    orderBy: Allowance_orderBy
    orderDirection: OrderDirection
    where: Allowance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Allowance!]!
  accountBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountBalance
  accountBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountBalance_orderBy
    orderDirection: OrderDirection
    where: AccountBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountBalance!]!
  accountBalanceSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountBalanceSnapshot
  accountBalanceSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountBalanceSnapshot_orderBy
    orderDirection: OrderDirection
    where: AccountBalanceSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountBalanceSnapshot!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  tokenEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenEvent
  tokenEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenEvent_orderBy
    orderDirection: OrderDirection
    where: TokenEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenEvent!]!
}

type Subscription {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  offerPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OfferPrice
  offerPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: OfferPrice_orderBy
    orderDirection: OrderDirection
    where: OfferPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OfferPrice!]!
  purchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Purchase
  purchases(
    skip: Int = 0
    first: Int = 100
    orderBy: Purchase_orderBy
    orderDirection: OrderDirection
    where: Purchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Purchase!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  burnEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BurnEvent
  burnEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: BurnEvent_orderBy
    orderDirection: OrderDirection
    where: BurnEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BurnEvent!]!
  mintEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MintEvent
  mintEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: MintEvent_orderBy
    orderDirection: OrderDirection
    where: MintEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MintEvent!]!
  transferEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferEvent
  transferEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferEvent_orderBy
    orderDirection: OrderDirection
    where: TransferEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransferEvent!]!
  allowance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Allowance
  allowances(
    skip: Int = 0
    first: Int = 100
    orderBy: Allowance_orderBy
    orderDirection: OrderDirection
    where: Allowance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Allowance!]!
  accountBalance(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountBalance
  accountBalances(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountBalance_orderBy
    orderDirection: OrderDirection
    where: AccountBalance_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountBalance!]!
  accountBalanceSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountBalanceSnapshot
  accountBalanceSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: AccountBalanceSnapshot_orderBy
    orderDirection: OrderDirection
    where: AccountBalanceSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AccountBalanceSnapshot!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  tokenEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenEvent
  tokenEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenEvent_orderBy
    orderDirection: OrderDirection
    where: TokenEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenEvent!]!
}

type Account {
  """ Equals to: <accountAddress>"""
  id: ID!
  """ Account address """
  address: Bytes!
  """ User offers """
  offers(skip: Int = 0, first: Int = 100, orderBy: Offer_orderBy, orderDirection: OrderDirection, where: Offer_filter): [Offer!]!
  """ User purchases """
  purchases(skip: Int = 0, first: Int = 100, orderBy: Purchase_orderBy, orderDirection: OrderDirection, where: Purchase_filter): [Purchase!]!
  """ User sell """
  sells(skip: Int = 0, first: Int = 100, orderBy: Purchase_orderBy, orderDirection: OrderDirection, where: Purchase_filter): [Purchase!]!
  """ Purchase count """
  purchaseCount: BigInt!
  """ Sell count """
  sellCount: BigInt!
  """ Offer count """
  offerCount: BigInt!
  """ Token balances that this account holds """
  balances(skip: Int = 0, first: Int = 100, orderBy: AccountBalance_orderBy, orderDirection: OrderDirection, where: AccountBalance_filter): [AccountBalance!]!
  """ Allowances for Account """
  allowances(skip: Int = 0, first: Int = 100, orderBy: Allowance_orderBy, orderDirection: OrderDirection, where: Allowance_filter): [Allowance!]!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  offers: [String!]
  offers_not: [String!]
  offers_contains: [String!]
  offers_contains_nocase: [String!]
  offers_not_contains: [String!]
  offers_not_contains_nocase: [String!]
  offers_: Offer_filter
  purchases: [String!]
  purchases_not: [String!]
  purchases_contains: [String!]
  purchases_contains_nocase: [String!]
  purchases_not_contains: [String!]
  purchases_not_contains_nocase: [String!]
  purchases_: Purchase_filter
  sells: [String!]
  sells_not: [String!]
  sells_contains: [String!]
  sells_contains_nocase: [String!]
  sells_not_contains: [String!]
  sells_not_contains_nocase: [String!]
  sells_: Purchase_filter
  purchaseCount: BigInt
  purchaseCount_not: BigInt
  purchaseCount_gt: BigInt
  purchaseCount_lt: BigInt
  purchaseCount_gte: BigInt
  purchaseCount_lte: BigInt
  purchaseCount_in: [BigInt!]
  purchaseCount_not_in: [BigInt!]
  sellCount: BigInt
  sellCount_not: BigInt
  sellCount_gt: BigInt
  sellCount_lt: BigInt
  sellCount_gte: BigInt
  sellCount_lte: BigInt
  sellCount_in: [BigInt!]
  sellCount_not_in: [BigInt!]
  offerCount: BigInt
  offerCount_not: BigInt
  offerCount_gt: BigInt
  offerCount_lt: BigInt
  offerCount_gte: BigInt
  offerCount_lte: BigInt
  offerCount_in: [BigInt!]
  offerCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  balances_: AccountBalance_filter
  allowances_: Allowance_filter
}

enum Account_orderBy {
  id
  address
  offers
  purchases
  sells
  purchaseCount
  sellCount
  offerCount
  balances
  allowances
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

""" Offer entity """
type Offer {
  """ Offer ID """
  id: ID!
  """ Seller 0x """
  seller: Account!
  """ Offer token 0x"""
  offerToken: Token!
  """ Buyer token 0x"""
  buyerToken: Token!
  """ Price array """
  prices(skip: Int = 0, first: Int = 100, orderBy: OfferPrice_orderBy, orderDirection: OrderDirection, where: OfferPrice_filter): [OfferPrice!]!
  """ Current price """
  price: OfferPrice!
  """ Available amount """
  availableAmount: BigDecimal!
  """ Purchase array """
  purchases(skip: Int = 0, first: Int = 100, orderBy: Purchase_orderBy, orderDirection: OrderDirection, where: Purchase_filter): [Purchase!]!
  """ Purchase count """
  purchaseCount: BigInt!
  """ Buyer if offer is private """
  buyer: Account
  """ Offer creation block """
  createdAtBlock: BigInt!
  """ Offer creation timestamp """
  createdAtTimestamp: BigInt!
  """ Offer removal block """
  removedAtBlock: BigInt
  """ Offer removal timestamp """
  removedAtTimestamp: BigInt
}

""" OfferPrice entity """
type OfferPrice {
  id: ID!
  """ Offer entity """
  offer: Offer!
  """ Price """
  price: BigDecimal!
  """ Amount """
  amount: BigDecimal!
  """ Creation block """
  createdAtBlock: BigInt!
  """ Creation timestamp """
  createdAtTimestamp: BigInt!
}

input OfferPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  offer: String
  offer_not: String
  offer_gt: String
  offer_lt: String
  offer_gte: String
  offer_lte: String
  offer_in: [String!]
  offer_not_in: [String!]
  offer_contains: String
  offer_contains_nocase: String
  offer_not_contains: String
  offer_not_contains_nocase: String
  offer_starts_with: String
  offer_starts_with_nocase: String
  offer_not_starts_with: String
  offer_not_starts_with_nocase: String
  offer_ends_with: String
  offer_ends_with_nocase: String
  offer_not_ends_with: String
  offer_not_ends_with_nocase: String
  offer_: Offer_filter
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum OfferPrice_orderBy {
  id
  offer
  price
  amount
  createdAtBlock
  createdAtTimestamp
}

input Offer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  seller: String
  seller_not: String
  seller_gt: String
  seller_lt: String
  seller_gte: String
  seller_lte: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_contains: String
  seller_contains_nocase: String
  seller_not_contains: String
  seller_not_contains_nocase: String
  seller_starts_with: String
  seller_starts_with_nocase: String
  seller_not_starts_with: String
  seller_not_starts_with_nocase: String
  seller_ends_with: String
  seller_ends_with_nocase: String
  seller_not_ends_with: String
  seller_not_ends_with_nocase: String
  seller_: Account_filter
  offerToken: String
  offerToken_not: String
  offerToken_gt: String
  offerToken_lt: String
  offerToken_gte: String
  offerToken_lte: String
  offerToken_in: [String!]
  offerToken_not_in: [String!]
  offerToken_contains: String
  offerToken_contains_nocase: String
  offerToken_not_contains: String
  offerToken_not_contains_nocase: String
  offerToken_starts_with: String
  offerToken_starts_with_nocase: String
  offerToken_not_starts_with: String
  offerToken_not_starts_with_nocase: String
  offerToken_ends_with: String
  offerToken_ends_with_nocase: String
  offerToken_not_ends_with: String
  offerToken_not_ends_with_nocase: String
  offerToken_: Token_filter
  buyerToken: String
  buyerToken_not: String
  buyerToken_gt: String
  buyerToken_lt: String
  buyerToken_gte: String
  buyerToken_lte: String
  buyerToken_in: [String!]
  buyerToken_not_in: [String!]
  buyerToken_contains: String
  buyerToken_contains_nocase: String
  buyerToken_not_contains: String
  buyerToken_not_contains_nocase: String
  buyerToken_starts_with: String
  buyerToken_starts_with_nocase: String
  buyerToken_not_starts_with: String
  buyerToken_not_starts_with_nocase: String
  buyerToken_ends_with: String
  buyerToken_ends_with_nocase: String
  buyerToken_not_ends_with: String
  buyerToken_not_ends_with_nocase: String
  buyerToken_: Token_filter
  prices: [String!]
  prices_not: [String!]
  prices_contains: [String!]
  prices_contains_nocase: [String!]
  prices_not_contains: [String!]
  prices_not_contains_nocase: [String!]
  prices_: OfferPrice_filter
  price: String
  price_not: String
  price_gt: String
  price_lt: String
  price_gte: String
  price_lte: String
  price_in: [String!]
  price_not_in: [String!]
  price_contains: String
  price_contains_nocase: String
  price_not_contains: String
  price_not_contains_nocase: String
  price_starts_with: String
  price_starts_with_nocase: String
  price_not_starts_with: String
  price_not_starts_with_nocase: String
  price_ends_with: String
  price_ends_with_nocase: String
  price_not_ends_with: String
  price_not_ends_with_nocase: String
  price_: OfferPrice_filter
  availableAmount: BigDecimal
  availableAmount_not: BigDecimal
  availableAmount_gt: BigDecimal
  availableAmount_lt: BigDecimal
  availableAmount_gte: BigDecimal
  availableAmount_lte: BigDecimal
  availableAmount_in: [BigDecimal!]
  availableAmount_not_in: [BigDecimal!]
  purchases: [String!]
  purchases_not: [String!]
  purchases_contains: [String!]
  purchases_contains_nocase: [String!]
  purchases_not_contains: [String!]
  purchases_not_contains_nocase: [String!]
  purchases_: Purchase_filter
  purchaseCount: BigInt
  purchaseCount_not: BigInt
  purchaseCount_gt: BigInt
  purchaseCount_lt: BigInt
  purchaseCount_gte: BigInt
  purchaseCount_lte: BigInt
  purchaseCount_in: [BigInt!]
  purchaseCount_not_in: [BigInt!]
  buyer: String
  buyer_not: String
  buyer_gt: String
  buyer_lt: String
  buyer_gte: String
  buyer_lte: String
  buyer_in: [String!]
  buyer_not_in: [String!]
  buyer_contains: String
  buyer_contains_nocase: String
  buyer_not_contains: String
  buyer_not_contains_nocase: String
  buyer_starts_with: String
  buyer_starts_with_nocase: String
  buyer_not_starts_with: String
  buyer_not_starts_with_nocase: String
  buyer_ends_with: String
  buyer_ends_with_nocase: String
  buyer_not_ends_with: String
  buyer_not_ends_with_nocase: String
  buyer_: Account_filter
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  removedAtBlock: BigInt
  removedAtBlock_not: BigInt
  removedAtBlock_gt: BigInt
  removedAtBlock_lt: BigInt
  removedAtBlock_gte: BigInt
  removedAtBlock_lte: BigInt
  removedAtBlock_in: [BigInt!]
  removedAtBlock_not_in: [BigInt!]
  removedAtTimestamp: BigInt
  removedAtTimestamp_not: BigInt
  removedAtTimestamp_gt: BigInt
  removedAtTimestamp_lt: BigInt
  removedAtTimestamp_gte: BigInt
  removedAtTimestamp_lte: BigInt
  removedAtTimestamp_in: [BigInt!]
  removedAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Offer_orderBy {
  id
  seller
  offerToken
  buyerToken
  prices
  price
  availableAmount
  purchases
  purchaseCount
  buyer
  createdAtBlock
  createdAtTimestamp
  removedAtBlock
  removedAtTimestamp
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Purchase {
  id: ID!
  """ Offer entity """
  offer: Offer!
  """ Buyer 0x """
  buyer: Account!
  """ Price """
  price: BigDecimal!
  """ Quantity """
  quantity: BigDecimal!
  """ Creation block """
  createdAtBlock: BigInt!
  """ Creation timestamp """
  createdAtTimestamp: BigInt!
}

input Purchase_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  offer: String
  offer_not: String
  offer_gt: String
  offer_lt: String
  offer_gte: String
  offer_lte: String
  offer_in: [String!]
  offer_not_in: [String!]
  offer_contains: String
  offer_contains_nocase: String
  offer_not_contains: String
  offer_not_contains_nocase: String
  offer_starts_with: String
  offer_starts_with_nocase: String
  offer_not_starts_with: String
  offer_not_starts_with_nocase: String
  offer_ends_with: String
  offer_ends_with_nocase: String
  offer_not_ends_with: String
  offer_not_ends_with_nocase: String
  offer_: Offer_filter
  buyer: String
  buyer_not: String
  buyer_gt: String
  buyer_lt: String
  buyer_gte: String
  buyer_lte: String
  buyer_in: [String!]
  buyer_not_in: [String!]
  buyer_contains: String
  buyer_contains_nocase: String
  buyer_not_contains: String
  buyer_not_contains_nocase: String
  buyer_starts_with: String
  buyer_starts_with_nocase: String
  buyer_not_starts_with: String
  buyer_not_starts_with_nocase: String
  buyer_ends_with: String
  buyer_ends_with_nocase: String
  buyer_not_ends_with: String
  buyer_not_ends_with_nocase: String
  buyer_: Account_filter
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  quantity: BigDecimal
  quantity_not: BigDecimal
  quantity_gt: BigDecimal
  quantity_lt: BigDecimal
  quantity_gte: BigDecimal
  quantity_lte: BigDecimal
  quantity_in: [BigDecimal!]
  quantity_not_in: [BigDecimal!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Purchase_orderBy {
  id
  offer
  buyer
  price
  quantity
  createdAtBlock
  createdAtTimestamp
}

type Token {
  id: ID!
  """ Token address """
  address: Bytes!
  """ Array of offers """
  offers(skip: Int = 0, first: Int = 100, orderBy: Offer_orderBy, orderDirection: OrderDirection, where: Offer_filter): [Offer!]!
  """ Array of purchases """
  purchases(skip: Int = 0, first: Int = 100, orderBy: Purchase_orderBy, orderDirection: OrderDirection, where: Purchase_filter): [Purchase!]!
  """ Purchase count """
  purchaseCount: BigInt!
  """ Dollars volume """
  dollarsVolume: BigDecimal!
  """ Offer count """
  offerCount: BigInt!
  """ TokenType: 0:NOWL|1:REALTOKEN|2:ERC20PERMIT|3:ERC20NOPERMIT """
  tokenType: Int!
  """ Number of decimals the token uses """
  decimals: Int!
  """ Token name """
  name: String
  """ Symbol of the token """
  symbol: String!
  """ Human-readable fullname of the token """
  fullName: String!
  """ Total number of events (all types)"""
  eventCount: BigInt!
  """ Total number of burn events """
  burnEventCount: BigInt!
  """ Total number of mint events """
  mintEventCount: BigInt!
  """ Total number of transfer events """
  transferEventCount: BigInt!
  """ Total number of approval events """
  approveEventCount: BigInt!
  """ Total token supply """
  totalSupply: BigDecimal!
  """ Total token burned """
  totalBurned: BigDecimal!
  """ Total token minted """
  totalMinted: BigDecimal!
  """ Total token transferred """
  totalTransferred: BigDecimal!
  """ List of approval events """
  approveEvent(skip: Int = 0, first: Int = 100, orderBy: Allowance_orderBy, orderDirection: OrderDirection, where: Allowance_filter): [Allowance!]!
  """ List of burn events """
  burnEvents(skip: Int = 0, first: Int = 100, orderBy: BurnEvent_orderBy, orderDirection: OrderDirection, where: BurnEvent_filter): [BurnEvent!]!
  """ List of mint events """
  mintEvents(skip: Int = 0, first: Int = 100, orderBy: MintEvent_orderBy, orderDirection: OrderDirection, where: MintEvent_filter): [MintEvent!]!
  """ List of token events """
  transferEvents(skip: Int = 0, first: Int = 100, orderBy: TransferEvent_orderBy, orderDirection: OrderDirection, where: TransferEvent_filter): [TransferEvent!]!
  """ List of transactions """
  transactions(skip: Int = 0, first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, where: Transaction_filter): [Transaction!]!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  offers: [String!]
  offers_not: [String!]
  offers_contains: [String!]
  offers_contains_nocase: [String!]
  offers_not_contains: [String!]
  offers_not_contains_nocase: [String!]
  offers_: Offer_filter
  purchases: [String!]
  purchases_not: [String!]
  purchases_contains: [String!]
  purchases_contains_nocase: [String!]
  purchases_not_contains: [String!]
  purchases_not_contains_nocase: [String!]
  purchases_: Purchase_filter
  purchaseCount: BigInt
  purchaseCount_not: BigInt
  purchaseCount_gt: BigInt
  purchaseCount_lt: BigInt
  purchaseCount_gte: BigInt
  purchaseCount_lte: BigInt
  purchaseCount_in: [BigInt!]
  purchaseCount_not_in: [BigInt!]
  dollarsVolume: BigDecimal
  dollarsVolume_not: BigDecimal
  dollarsVolume_gt: BigDecimal
  dollarsVolume_lt: BigDecimal
  dollarsVolume_gte: BigDecimal
  dollarsVolume_lte: BigDecimal
  dollarsVolume_in: [BigDecimal!]
  dollarsVolume_not_in: [BigDecimal!]
  offerCount: BigInt
  offerCount_not: BigInt
  offerCount_gt: BigInt
  offerCount_lt: BigInt
  offerCount_gte: BigInt
  offerCount_lte: BigInt
  offerCount_in: [BigInt!]
  offerCount_not_in: [BigInt!]
  tokenType: Int
  tokenType_not: Int
  tokenType_gt: Int
  tokenType_lt: Int
  tokenType_gte: Int
  tokenType_lte: Int
  tokenType_in: [Int!]
  tokenType_not_in: [Int!]
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  fullName: String
  fullName_not: String
  fullName_gt: String
  fullName_lt: String
  fullName_gte: String
  fullName_lte: String
  fullName_in: [String!]
  fullName_not_in: [String!]
  fullName_contains: String
  fullName_contains_nocase: String
  fullName_not_contains: String
  fullName_not_contains_nocase: String
  fullName_starts_with: String
  fullName_starts_with_nocase: String
  fullName_not_starts_with: String
  fullName_not_starts_with_nocase: String
  fullName_ends_with: String
  fullName_ends_with_nocase: String
  fullName_not_ends_with: String
  fullName_not_ends_with_nocase: String
  eventCount: BigInt
  eventCount_not: BigInt
  eventCount_gt: BigInt
  eventCount_lt: BigInt
  eventCount_gte: BigInt
  eventCount_lte: BigInt
  eventCount_in: [BigInt!]
  eventCount_not_in: [BigInt!]
  burnEventCount: BigInt
  burnEventCount_not: BigInt
  burnEventCount_gt: BigInt
  burnEventCount_lt: BigInt
  burnEventCount_gte: BigInt
  burnEventCount_lte: BigInt
  burnEventCount_in: [BigInt!]
  burnEventCount_not_in: [BigInt!]
  mintEventCount: BigInt
  mintEventCount_not: BigInt
  mintEventCount_gt: BigInt
  mintEventCount_lt: BigInt
  mintEventCount_gte: BigInt
  mintEventCount_lte: BigInt
  mintEventCount_in: [BigInt!]
  mintEventCount_not_in: [BigInt!]
  transferEventCount: BigInt
  transferEventCount_not: BigInt
  transferEventCount_gt: BigInt
  transferEventCount_lt: BigInt
  transferEventCount_gte: BigInt
  transferEventCount_lte: BigInt
  transferEventCount_in: [BigInt!]
  transferEventCount_not_in: [BigInt!]
  approveEventCount: BigInt
  approveEventCount_not: BigInt
  approveEventCount_gt: BigInt
  approveEventCount_lt: BigInt
  approveEventCount_gte: BigInt
  approveEventCount_lte: BigInt
  approveEventCount_in: [BigInt!]
  approveEventCount_not_in: [BigInt!]
  totalSupply: BigDecimal
  totalSupply_not: BigDecimal
  totalSupply_gt: BigDecimal
  totalSupply_lt: BigDecimal
  totalSupply_gte: BigDecimal
  totalSupply_lte: BigDecimal
  totalSupply_in: [BigDecimal!]
  totalSupply_not_in: [BigDecimal!]
  totalBurned: BigDecimal
  totalBurned_not: BigDecimal
  totalBurned_gt: BigDecimal
  totalBurned_lt: BigDecimal
  totalBurned_gte: BigDecimal
  totalBurned_lte: BigDecimal
  totalBurned_in: [BigDecimal!]
  totalBurned_not_in: [BigDecimal!]
  totalMinted: BigDecimal
  totalMinted_not: BigDecimal
  totalMinted_gt: BigDecimal
  totalMinted_lt: BigDecimal
  totalMinted_gte: BigDecimal
  totalMinted_lte: BigDecimal
  totalMinted_in: [BigDecimal!]
  totalMinted_not_in: [BigDecimal!]
  totalTransferred: BigDecimal
  totalTransferred_not: BigDecimal
  totalTransferred_gt: BigDecimal
  totalTransferred_lt: BigDecimal
  totalTransferred_gte: BigDecimal
  totalTransferred_lte: BigDecimal
  totalTransferred_in: [BigDecimal!]
  totalTransferred_not_in: [BigDecimal!]
  approveEvent_: Allowance_filter
  burnEvents_: BurnEvent_filter
  mintEvents_: MintEvent_filter
  transferEvents_: TransferEvent_filter
  transactions: [String!]
  transactions_not: [String!]
  transactions_contains: [String!]
  transactions_contains_nocase: [String!]
  transactions_not_contains: [String!]
  transactions_not_contains_nocase: [String!]
  transactions_: Transaction_filter
}

enum Token_orderBy {
  id
  address
  offers
  purchases
  purchaseCount
  dollarsVolume
  offerCount
  tokenType
  decimals
  name
  symbol
  fullName
  eventCount
  burnEventCount
  mintEventCount
  transferEventCount
  approveEventCount
  totalSupply
  totalBurned
  totalMinted
  totalTransferred
  approveEvent
  burnEvents
  mintEvents
  transferEvents
  transactions
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type AccountBalance {
  """ Equals to: <accountAddress>-<tokenAddress>"""
  id: ID!
  """ Account address """
  account: Account!
  """ Token address """
  token: Token!
  """ Current account balance """
  amount: BigDecimal!
  """ Allowances for AccountBalance """
  allowances(skip: Int = 0, first: Int = 100, orderBy: Allowance_orderBy, orderDirection: OrderDirection, where: Allowance_filter): [Allowance!]!
  """ Block number in which the balance was last modified """
  block: BigInt!
  """ Last modified timestamp in seconds """
  modified: BigInt!
  """ Hash of the last transaction that modified the balance """
  transaction: Transaction!
}

type AccountBalanceSnapshot {
  """ Equals to: <accountAddress>-<tokenAddress>-<timestamp>"""
  id: ID!
  """ Account address """
  account: Account!
  """ Token addess """
  token: Token!
  """ Account balance """
  amount: BigDecimal!
  event: TransferEvent!
  """ Block number """
  block: BigInt!
  """ Timestamp in seconds """
  timestamp: BigInt!
  """ Transaction hash """
  transaction: Transaction!
}

input AccountBalanceSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  event: String
  event_not: String
  event_gt: String
  event_lt: String
  event_gte: String
  event_lte: String
  event_in: [String!]
  event_not_in: [String!]
  event_contains: String
  event_contains_nocase: String
  event_not_contains: String
  event_not_contains_nocase: String
  event_starts_with: String
  event_starts_with_nocase: String
  event_not_starts_with: String
  event_not_starts_with_nocase: String
  event_ends_with: String
  event_ends_with_nocase: String
  event_not_ends_with: String
  event_not_ends_with_nocase: String
  event_: TransferEvent_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AccountBalanceSnapshot_orderBy {
  id
  account
  token
  amount
  event
  block
  timestamp
  transaction
}

input AccountBalance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  allowances_: Allowance_filter
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  modified: BigInt
  modified_not: BigInt
  modified_gt: BigInt
  modified_lt: BigInt
  modified_gte: BigInt
  modified_lte: BigInt
  modified_in: [BigInt!]
  modified_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum AccountBalance_orderBy {
  id
  account
  token
  amount
  allowances
  block
  modified
  transaction
}

type Allowance {
  """ Equals to: <accountAddress>-<tokenAddress>-<spenderAddress>"""
  id: ID!
  """ Spender address """
  spender: Account!
  """ Account address """
  account: Account!
  """ Token address """
  token: Token!
  """ Current allowance """
  allowance: BigDecimal!
  """ Account balance """
  balance: AccountBalance!
}

input Allowance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  spender: String
  spender_not: String
  spender_gt: String
  spender_lt: String
  spender_gte: String
  spender_lte: String
  spender_in: [String!]
  spender_not_in: [String!]
  spender_contains: String
  spender_contains_nocase: String
  spender_not_contains: String
  spender_not_contains_nocase: String
  spender_starts_with: String
  spender_starts_with_nocase: String
  spender_not_starts_with: String
  spender_not_starts_with_nocase: String
  spender_ends_with: String
  spender_ends_with_nocase: String
  spender_not_ends_with: String
  spender_not_ends_with_nocase: String
  spender_: Account_filter
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: Account_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  allowance: BigDecimal
  allowance_not: BigDecimal
  allowance_gt: BigDecimal
  allowance_lt: BigDecimal
  allowance_gte: BigDecimal
  allowance_lte: BigDecimal
  allowance_in: [BigDecimal!]
  allowance_not_in: [BigDecimal!]
  balance: String
  balance_not: String
  balance_gt: String
  balance_lt: String
  balance_gte: String
  balance_lte: String
  balance_in: [String!]
  balance_not_in: [String!]
  balance_contains: String
  balance_contains_nocase: String
  balance_not_contains: String
  balance_not_contains_nocase: String
  balance_starts_with: String
  balance_starts_with_nocase: String
  balance_not_starts_with: String
  balance_not_starts_with_nocase: String
  balance_ends_with: String
  balance_ends_with_nocase: String
  balance_not_ends_with: String
  balance_not_ends_with_nocase: String
  balance_: AccountBalance_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Allowance_orderBy {
  id
  spender
  account
  token
  allowance
  balance
}

type BurnEvent implements TokenEvent {
  id: ID!
  """ Token address """
  token: Token!
  """ Quantity of tokens burned """
  amount: BigDecimal!
  """ Transaction sender address """
  sender: Bytes!
  """ Address of burned account """
  burner: Bytes!
  """ Block number """
  block: BigInt!
  """ Event timestamp """
  timestamp: BigInt!
  """ Transaction hash """
  transaction: Transaction!
}

input BurnEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  burner: Bytes
  burner_not: Bytes
  burner_in: [Bytes!]
  burner_not_in: [Bytes!]
  burner_contains: Bytes
  burner_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum BurnEvent_orderBy {
  id
  token
  amount
  sender
  burner
  block
  timestamp
  transaction
}

type MintEvent implements TokenEvent {
  id: ID!
  """ Token address """
  token: Token!
  """ Quantity of tokens minted """
  amount: BigDecimal!
  """ Transaction sender address """
  sender: Bytes!
  """ Address of destination account """
  destination: Bytes!
  """ Block number """
  block: BigInt!
  """ Event timestamp """
  timestamp: BigInt!
  """ Transaction hash """
  transaction: Transaction!
}

input MintEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  destination: Bytes
  destination_not: Bytes
  destination_in: [Bytes!]
  destination_not_in: [Bytes!]
  destination_contains: Bytes
  destination_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum MintEvent_orderBy {
  id
  token
  amount
  sender
  destination
  block
  timestamp
  transaction
}

interface TokenEvent {
  id: ID!
  """ Token address """
  token: Token!
  """ Quantity of tokens """
  amount: BigDecimal!
  """ Transaction sender address """
  sender: Bytes!
  """ Block number """
  block: BigInt!
  """ Event timestamp """
  timestamp: BigInt!
  """ Transaction hash """
  transaction: Transaction!
}

input TokenEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TokenEvent_orderBy {
  id
  token
  amount
  sender
  block
  timestamp
  transaction
}

type Transaction {
  """ Transaction hash """
  id: ID!
  """ List of transfer events """
  transferEvents(skip: Int = 0, first: Int = 100, orderBy: TransferEvent_orderBy, orderDirection: OrderDirection, where: TransferEvent_filter): [TransferEvent!]!
  """ Input """
  input: Bytes!
  """ Value """
  value: BigInt!
  """ Block number """
  block: BigInt!
  """ Event timestamp """
  timestamp: BigInt!
  """ Transaction gas limit """
  gasLimit: BigInt!
  """ Transaction gas price """
  gasPrice: BigInt!
  """ Transaction cumulative gas used """
  cumulativeGasUsed: BigInt
  """ Transaction gas used """
  gasUsed: BigInt
  """ Interacted With (To)  """
  to: Bytes
}

input Transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transferEvents_: TransferEvent_filter
  input: Bytes
  input_not: Bytes
  input_in: [Bytes!]
  input_not_in: [Bytes!]
  input_contains: Bytes
  input_not_contains: Bytes
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  gasLimit: BigInt
  gasLimit_not: BigInt
  gasLimit_gt: BigInt
  gasLimit_lt: BigInt
  gasLimit_gte: BigInt
  gasLimit_lte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  cumulativeGasUsed: BigInt
  cumulativeGasUsed_not: BigInt
  cumulativeGasUsed_gt: BigInt
  cumulativeGasUsed_lt: BigInt
  cumulativeGasUsed_gte: BigInt
  cumulativeGasUsed_lte: BigInt
  cumulativeGasUsed_in: [BigInt!]
  cumulativeGasUsed_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_not: BigInt
  gasUsed_gt: BigInt
  gasUsed_lt: BigInt
  gasUsed_gte: BigInt
  gasUsed_lte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_not_in: [BigInt!]
  to: Bytes
  to_not: Bytes
  to_in: [Bytes!]
  to_not_in: [Bytes!]
  to_contains: Bytes
  to_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Transaction_orderBy {
  id
  transferEvents
  input
  value
  block
  timestamp
  gasLimit
  gasPrice
  cumulativeGasUsed
  gasUsed
  to
}

type TransferEvent implements TokenEvent {
  id: ID!
  """ Token address """
  token: Token!
  """ Quantity of tokens transferred """
  amount: BigDecimal!
  """ Transaction sender address """
  sender: Bytes!
  """ Address of source account """
  source: Bytes!
  """ Address of destination account """
  destination: Bytes!
  """ Block number """
  block: BigInt!
  """ Event timestamp """
  timestamp: BigInt!
  """ Transaction hash """
  transaction: Transaction!
}

input TransferEvent_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: Token_filter
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  sender: Bytes
  sender_not: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  source: Bytes
  source_not: Bytes
  source_in: [Bytes!]
  source_not_in: [Bytes!]
  source_contains: Bytes
  source_not_contains: Bytes
  destination: Bytes
  destination_not: Bytes
  destination_in: [Bytes!]
  destination_not_in: [Bytes!]
  destination_contains: Bytes
  destination_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: Transaction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum TransferEvent_orderBy {
  id
  token
  amount
  sender
  source
  destination
  block
  timestamp
  transaction
}