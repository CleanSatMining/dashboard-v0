schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

""" Account entity """
type Account {
  """ User address """
  id: ID!
  """ User address """
  address: Bytes!
  """ User offers """
  offers(skip: Int = 0, first: Int = 100, orderBy: Offer_orderBy, orderDirection: OrderDirection, where: Offer_filter): [Offer!]!
  """ User purchases """
  purchases(skip: Int = 0, first: Int = 100, orderBy: Purchase_orderBy, orderDirection: OrderDirection, where: Purchase_filter): [Purchase!]!
  """ User sell """
  sells(skip: Int = 0, first: Int = 100, orderBy: Purchase_orderBy, orderDirection: OrderDirection, where: Purchase_filter): [Purchase!]!
  """ Purchase count """
  purchaseCount: BigInt!
  """ Sell count """
  sellCount: BigInt!
  """ Offer count """
  offerCount: BigInt!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  offers: [String!]
  offers_not: [String!]
  offers_contains: [String!]
  offers_contains_nocase: [String!]
  offers_not_contains: [String!]
  offers_not_contains_nocase: [String!]
  offers_: Offer_filter
  purchases: [String!]
  purchases_not: [String!]
  purchases_contains: [String!]
  purchases_contains_nocase: [String!]
  purchases_not_contains: [String!]
  purchases_not_contains_nocase: [String!]
  purchases_: Purchase_filter
  sells: [String!]
  sells_not: [String!]
  sells_contains: [String!]
  sells_contains_nocase: [String!]
  sells_not_contains: [String!]
  sells_not_contains_nocase: [String!]
  sells_: Purchase_filter
  purchaseCount: BigInt
  purchaseCount_not: BigInt
  purchaseCount_gt: BigInt
  purchaseCount_lt: BigInt
  purchaseCount_gte: BigInt
  purchaseCount_lte: BigInt
  purchaseCount_in: [BigInt!]
  purchaseCount_not_in: [BigInt!]
  sellCount: BigInt
  sellCount_not: BigInt
  sellCount_gt: BigInt
  sellCount_lt: BigInt
  sellCount_gte: BigInt
  sellCount_lte: BigInt
  sellCount_in: [BigInt!]
  sellCount_not_in: [BigInt!]
  offerCount: BigInt
  offerCount_not: BigInt
  offerCount_gt: BigInt
  offerCount_lt: BigInt
  offerCount_gte: BigInt
  offerCount_lte: BigInt
  offerCount_in: [BigInt!]
  offerCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Account_orderBy {
  id
  address
  offers
  purchases
  sells
  purchaseCount
  sellCount
  offerCount
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

""" Offer entity """
type Offer {
  """ Offer ID """
  id: ID!
  """ Seller 0x """
  seller: Account!
  """ Offer token 0x"""
  offerToken: Token!
  """ Buyer token 0x"""
  buyerToken: Token!
  """ Price array """
  prices(skip: Int = 0, first: Int = 100, orderBy: OfferPrice_orderBy, orderDirection: OrderDirection, where: OfferPrice_filter): [OfferPrice!]!
  """ Current price """
  price: OfferPrice!
  """ Available amount """
  availableAmount: BigDecimal!
  """ Purchase array """
  purchases(skip: Int = 0, first: Int = 100, orderBy: Purchase_orderBy, orderDirection: OrderDirection, where: Purchase_filter): [Purchase!]!
  """ Purchase count """
  purchaseCount: BigInt!
  """ Buyer if offer is private """
  buyer: Account
  """ Offer creation block """
  createdAtBlock: BigInt!
  """ Offer creation timestamp """
  createdAtTimestamp: BigInt!
  """ Offer removal block """
  removedAtBlock: BigInt
  """ Offer removal timestamp """
  removedAtTimestamp: BigInt
}

""" OfferPrice entity """
type OfferPrice {
  id: ID!
  """ Offer entity """
  offer: Offer!
  """ Price """
  price: BigDecimal!
  """ Amount """
  amount: BigDecimal!
  """ Creation block """
  createdAtBlock: BigInt!
  """ Creation timestamp """
  createdAtTimestamp: BigInt!
}

input OfferPrice_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  offer: String
  offer_not: String
  offer_gt: String
  offer_lt: String
  offer_gte: String
  offer_lte: String
  offer_in: [String!]
  offer_not_in: [String!]
  offer_contains: String
  offer_contains_nocase: String
  offer_not_contains: String
  offer_not_contains_nocase: String
  offer_starts_with: String
  offer_starts_with_nocase: String
  offer_not_starts_with: String
  offer_not_starts_with_nocase: String
  offer_ends_with: String
  offer_ends_with_nocase: String
  offer_not_ends_with: String
  offer_not_ends_with_nocase: String
  offer_: Offer_filter
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum OfferPrice_orderBy {
  id
  offer
  price
  amount
  createdAtBlock
  createdAtTimestamp
}

input Offer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  seller: String
  seller_not: String
  seller_gt: String
  seller_lt: String
  seller_gte: String
  seller_lte: String
  seller_in: [String!]
  seller_not_in: [String!]
  seller_contains: String
  seller_contains_nocase: String
  seller_not_contains: String
  seller_not_contains_nocase: String
  seller_starts_with: String
  seller_starts_with_nocase: String
  seller_not_starts_with: String
  seller_not_starts_with_nocase: String
  seller_ends_with: String
  seller_ends_with_nocase: String
  seller_not_ends_with: String
  seller_not_ends_with_nocase: String
  seller_: Account_filter
  offerToken: String
  offerToken_not: String
  offerToken_gt: String
  offerToken_lt: String
  offerToken_gte: String
  offerToken_lte: String
  offerToken_in: [String!]
  offerToken_not_in: [String!]
  offerToken_contains: String
  offerToken_contains_nocase: String
  offerToken_not_contains: String
  offerToken_not_contains_nocase: String
  offerToken_starts_with: String
  offerToken_starts_with_nocase: String
  offerToken_not_starts_with: String
  offerToken_not_starts_with_nocase: String
  offerToken_ends_with: String
  offerToken_ends_with_nocase: String
  offerToken_not_ends_with: String
  offerToken_not_ends_with_nocase: String
  offerToken_: Token_filter
  buyerToken: String
  buyerToken_not: String
  buyerToken_gt: String
  buyerToken_lt: String
  buyerToken_gte: String
  buyerToken_lte: String
  buyerToken_in: [String!]
  buyerToken_not_in: [String!]
  buyerToken_contains: String
  buyerToken_contains_nocase: String
  buyerToken_not_contains: String
  buyerToken_not_contains_nocase: String
  buyerToken_starts_with: String
  buyerToken_starts_with_nocase: String
  buyerToken_not_starts_with: String
  buyerToken_not_starts_with_nocase: String
  buyerToken_ends_with: String
  buyerToken_ends_with_nocase: String
  buyerToken_not_ends_with: String
  buyerToken_not_ends_with_nocase: String
  buyerToken_: Token_filter
  prices: [String!]
  prices_not: [String!]
  prices_contains: [String!]
  prices_contains_nocase: [String!]
  prices_not_contains: [String!]
  prices_not_contains_nocase: [String!]
  prices_: OfferPrice_filter
  price: String
  price_not: String
  price_gt: String
  price_lt: String
  price_gte: String
  price_lte: String
  price_in: [String!]
  price_not_in: [String!]
  price_contains: String
  price_contains_nocase: String
  price_not_contains: String
  price_not_contains_nocase: String
  price_starts_with: String
  price_starts_with_nocase: String
  price_not_starts_with: String
  price_not_starts_with_nocase: String
  price_ends_with: String
  price_ends_with_nocase: String
  price_not_ends_with: String
  price_not_ends_with_nocase: String
  price_: OfferPrice_filter
  availableAmount: BigDecimal
  availableAmount_not: BigDecimal
  availableAmount_gt: BigDecimal
  availableAmount_lt: BigDecimal
  availableAmount_gte: BigDecimal
  availableAmount_lte: BigDecimal
  availableAmount_in: [BigDecimal!]
  availableAmount_not_in: [BigDecimal!]
  purchases: [String!]
  purchases_not: [String!]
  purchases_contains: [String!]
  purchases_contains_nocase: [String!]
  purchases_not_contains: [String!]
  purchases_not_contains_nocase: [String!]
  purchases_: Purchase_filter
  purchaseCount: BigInt
  purchaseCount_not: BigInt
  purchaseCount_gt: BigInt
  purchaseCount_lt: BigInt
  purchaseCount_gte: BigInt
  purchaseCount_lte: BigInt
  purchaseCount_in: [BigInt!]
  purchaseCount_not_in: [BigInt!]
  buyer: String
  buyer_not: String
  buyer_gt: String
  buyer_lt: String
  buyer_gte: String
  buyer_lte: String
  buyer_in: [String!]
  buyer_not_in: [String!]
  buyer_contains: String
  buyer_contains_nocase: String
  buyer_not_contains: String
  buyer_not_contains_nocase: String
  buyer_starts_with: String
  buyer_starts_with_nocase: String
  buyer_not_starts_with: String
  buyer_not_starts_with_nocase: String
  buyer_ends_with: String
  buyer_ends_with_nocase: String
  buyer_not_ends_with: String
  buyer_not_ends_with_nocase: String
  buyer_: Account_filter
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  removedAtBlock: BigInt
  removedAtBlock_not: BigInt
  removedAtBlock_gt: BigInt
  removedAtBlock_lt: BigInt
  removedAtBlock_gte: BigInt
  removedAtBlock_lte: BigInt
  removedAtBlock_in: [BigInt!]
  removedAtBlock_not_in: [BigInt!]
  removedAtTimestamp: BigInt
  removedAtTimestamp_not: BigInt
  removedAtTimestamp_gt: BigInt
  removedAtTimestamp_lt: BigInt
  removedAtTimestamp_gte: BigInt
  removedAtTimestamp_lte: BigInt
  removedAtTimestamp_in: [BigInt!]
  removedAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Offer_orderBy {
  id
  seller
  offerToken
  buyerToken
  prices
  price
  availableAmount
  purchases
  purchaseCount
  buyer
  createdAtBlock
  createdAtTimestamp
  removedAtBlock
  removedAtTimestamp
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Purchase {
  id: ID!
  """ Offer entity """
  offer: Offer!
  """ Buyer 0x """
  buyer: Account!
  """ Price """
  price: BigDecimal!
  """ Quantity """
  quantity: BigDecimal!
  """ Creation block """
  createdAtBlock: BigInt!
  """ Creation timestamp """
  createdAtTimestamp: BigInt!
}

input Purchase_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  offer: String
  offer_not: String
  offer_gt: String
  offer_lt: String
  offer_gte: String
  offer_lte: String
  offer_in: [String!]
  offer_not_in: [String!]
  offer_contains: String
  offer_contains_nocase: String
  offer_not_contains: String
  offer_not_contains_nocase: String
  offer_starts_with: String
  offer_starts_with_nocase: String
  offer_not_starts_with: String
  offer_not_starts_with_nocase: String
  offer_ends_with: String
  offer_ends_with_nocase: String
  offer_not_ends_with: String
  offer_not_ends_with_nocase: String
  offer_: Offer_filter
  buyer: String
  buyer_not: String
  buyer_gt: String
  buyer_lt: String
  buyer_gte: String
  buyer_lte: String
  buyer_in: [String!]
  buyer_not_in: [String!]
  buyer_contains: String
  buyer_contains_nocase: String
  buyer_not_contains: String
  buyer_not_contains_nocase: String
  buyer_starts_with: String
  buyer_starts_with_nocase: String
  buyer_not_starts_with: String
  buyer_not_starts_with_nocase: String
  buyer_ends_with: String
  buyer_ends_with_nocase: String
  buyer_not_ends_with: String
  buyer_not_ends_with_nocase: String
  buyer_: Account_filter
  price: BigDecimal
  price_not: BigDecimal
  price_gt: BigDecimal
  price_lt: BigDecimal
  price_gte: BigDecimal
  price_lte: BigDecimal
  price_in: [BigDecimal!]
  price_not_in: [BigDecimal!]
  quantity: BigDecimal
  quantity_not: BigDecimal
  quantity_gt: BigDecimal
  quantity_lt: BigDecimal
  quantity_gte: BigDecimal
  quantity_lte: BigDecimal
  quantity_in: [BigDecimal!]
  quantity_not_in: [BigDecimal!]
  createdAtBlock: BigInt
  createdAtBlock_not: BigInt
  createdAtBlock_gt: BigInt
  createdAtBlock_lt: BigInt
  createdAtBlock_gte: BigInt
  createdAtBlock_lte: BigInt
  createdAtBlock_in: [BigInt!]
  createdAtBlock_not_in: [BigInt!]
  createdAtTimestamp: BigInt
  createdAtTimestamp_not: BigInt
  createdAtTimestamp_gt: BigInt
  createdAtTimestamp_lt: BigInt
  createdAtTimestamp_gte: BigInt
  createdAtTimestamp_lte: BigInt
  createdAtTimestamp_in: [BigInt!]
  createdAtTimestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Purchase_orderBy {
  id
  offer
  buyer
  price
  quantity
  createdAtBlock
  createdAtTimestamp
}

type Query {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  offerPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OfferPrice
  offerPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: OfferPrice_orderBy
    orderDirection: OrderDirection
    where: OfferPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OfferPrice!]!
  purchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Purchase
  purchases(
    skip: Int = 0
    first: Int = 100
    orderBy: Purchase_orderBy
    orderDirection: OrderDirection
    where: Purchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Purchase!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  offerPrice(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OfferPrice
  offerPrices(
    skip: Int = 0
    first: Int = 100
    orderBy: OfferPrice_orderBy
    orderDirection: OrderDirection
    where: OfferPrice_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OfferPrice!]!
  purchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Purchase
  purchases(
    skip: Int = 0
    first: Int = 100
    orderBy: Purchase_orderBy
    orderDirection: OrderDirection
    where: Purchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Purchase!]!
  offer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Offer
  offers(
    skip: Int = 0
    first: Int = 100
    orderBy: Offer_orderBy
    orderDirection: OrderDirection
    where: Offer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Offer!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

""" Token entity """
type Token {
  id: ID!
  """ Token address """
  address: Bytes!
  """ Array of offers """
  offers(skip: Int = 0, first: Int = 100, orderBy: Offer_orderBy, orderDirection: OrderDirection, where: Offer_filter): [Offer!]!
  """ Array of purchases """
  purchases(skip: Int = 0, first: Int = 100, orderBy: Purchase_orderBy, orderDirection: OrderDirection, where: Purchase_filter): [Purchase!]!
  """ Purchase count """
  purchaseCount: BigInt!
  """ Dollars volume """
  dollarsVolume: BigDecimal!
  """ Offer count """
  offerCount: BigInt!
  """ TokenType: 0:NOWL|1:REALTOKEN|2:ERC20PERMIT|3:ERC20NOPERMIT """
  tokenType: Int!
  """ Token decimal """
  decimals: Int
  """ Token name """
  name: String
  """ Token symbol """
  symbol: String
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  offers: [String!]
  offers_not: [String!]
  offers_contains: [String!]
  offers_contains_nocase: [String!]
  offers_not_contains: [String!]
  offers_not_contains_nocase: [String!]
  offers_: Offer_filter
  purchases: [String!]
  purchases_not: [String!]
  purchases_contains: [String!]
  purchases_contains_nocase: [String!]
  purchases_not_contains: [String!]
  purchases_not_contains_nocase: [String!]
  purchases_: Purchase_filter
  purchaseCount: BigInt
  purchaseCount_not: BigInt
  purchaseCount_gt: BigInt
  purchaseCount_lt: BigInt
  purchaseCount_gte: BigInt
  purchaseCount_lte: BigInt
  purchaseCount_in: [BigInt!]
  purchaseCount_not_in: [BigInt!]
  dollarsVolume: BigDecimal
  dollarsVolume_not: BigDecimal
  dollarsVolume_gt: BigDecimal
  dollarsVolume_lt: BigDecimal
  dollarsVolume_gte: BigDecimal
  dollarsVolume_lte: BigDecimal
  dollarsVolume_in: [BigDecimal!]
  dollarsVolume_not_in: [BigDecimal!]
  offerCount: BigInt
  offerCount_not: BigInt
  offerCount_gt: BigInt
  offerCount_lt: BigInt
  offerCount_gte: BigInt
  offerCount_lte: BigInt
  offerCount_in: [BigInt!]
  offerCount_not_in: [BigInt!]
  tokenType: Int
  tokenType_not: Int
  tokenType_gt: Int
  tokenType_lt: Int
  tokenType_gte: Int
  tokenType_lte: Int
  tokenType_in: [Int!]
  tokenType_not_in: [Int!]
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
}

enum Token_orderBy {
  id
  address
  offers
  purchases
  purchaseCount
  dollarsVolume
  offerCount
  tokenType
  decimals
  name
  symbol
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}